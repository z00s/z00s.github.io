---
layout: post
title:  Swagger
categories: 编程
keywords: Swagger, 2016
---


## Swagger
**The World's Most Popular Framework for APIs.**

> Swagger™ is a project used to describe and document RESTful APIs.

> The Swagger specification defines a set of files required to describe such an API. These files can then be used by the Swagger-UI project to display the API and Swagger-Codegen to generate clients in various languages. Additional utilities can also take advantage of the resulting files, such as testing tools.

You can check details about Swagger on [Official Website](http://swagger.io/).

In this article we will discuss about how to integrate swagger-core into your Restful Jersey Application.

### Swagger Core

> swagger-core is a set of java libraries for generating and consuming Swagger defintions built around JAX-RS - head over to GitHub for the source-code and examples on how to start using it.

[Swagger-Core](http://swagger.io/swagger-core/)

I wrote a small demo to integrate it with my Jersey-Spring Application.
You can find it [... 404]()

Or try yourself with this [spec](https://github.com/swagger-api/swagger-core/wiki/Swagger-Core-JAX-RS-Project-Setup-1.5.X).

Or ...(I suggest that you should read that. The below sample is just for my app.)

#### Here is my changes:

Prerequisites:
> - maven 3.1.1
> - Jersey-Spring 1.19
> - Spring 3.2.13.RELEASE
> - swagger 1.5.0


Added maven dependencies

    <dependency>
      <groupId>io.swagger</groupId>
      <artifactId>swagger-jersey-jaxrs</artifactId>
      <version>1.5.0</version>
    </dependency>

> You need change to "swagger-jersey2-jaxrs" if you are using Jersey 2

Initialize swagger beans

    <!--swagger-core-->
    <bean id="apiListingResource" class="io.swagger.jaxrs.listing.ApiListingResource"/>
    <bean id="swaggerSerializers" class="io.swagger.jaxrs.listing.SwaggerSerializers" scope="singleton"/>
    
    <bean id="beanConfig" class="io.swagger.jaxrs.config.BeanConfig">
     <property name="title" value="Swagger Sample App"/>
     <property name="version" value="1.0.0" />
     <property name="schemes" value="http" />
     <property name="host" value="localhost:8080" />
     <property name="basePath" value="/"/>
     <property name="resourcePackage" value="com.mozs.again.api.resources"/>
     <property name="scan" value="true"/>
    </bean>

Then, you can use swagger [annotation](https://github.com/swagger-api/swagger-core/wiki/Annotations-1.5.X) to define your API now. LOL.

### Swagger UI
> Swagger UI is a dependency-free collection of HTML, Javascript, and CSS assets that dynamically generate beautiful documentation and sandbox from a Swagger-compliant API

[Swagger-UI](http://swagger.io/swagger-ui/)

### Swagger(Open API) 2.0 Specification

[OpenAPI-Specification](https://github.com/OAI/OpenAPI-Specification/blob/master/versions/2.0.md)

### Add CORS-support

> ! TODO: need to investigate it deeper, especially its security policy.

Basically, with swagger-ui, you can parse swagger.json which generated by swagger-core, and generate a beautiful documentation and sandbox. You can access this file by **{ApplicationRootPath}/swagger.json**. But most server are using the [same-origin policy](https://en.wikipedia.org/wiki/Same_origin_policy). Cross-Origin Resource Sharing (CORS) enables truly open access across domain-boundaries.

[http://enable-cors.org/](http://enable-cors.org/)
[Cors Support](https://github.com/swagger-api/swagger-ui/blob/master/README.md#cors-support)

Here is a simple filter to support CORS easily. 

    import com.sun.jersey.spi.container.ContainerRequest;
import com.sun.jersey.spi.container.ContainerResponse;
import com.sun.jersey.spi.container.ContainerResponseFilter;

public class CORSFilter implements ContainerResponseFilter {

    public ContainerResponse filter(ContainerRequest containerRequest,
                    ContainerResponse response) {
            response.getHttpHeaders().add("Access-Control-Allow-Origin", "*");
            response.getHttpHeaders().add("Access-Control-Allow-Headers",
                            "origin, content-type, accept, authorization");
            response.getHttpHeaders().add("Access-Control-Allow-Credentials", "true");
            response.getHttpHeaders().add("Access-Control-Allow-Methods",
                            "GET, POST, PUT, DELETE, OPTIONS, HEAD");
            return response;
        }
    }

And add it into your web.xml

      <servlet>
          <init-param>
              <param-name>com.sun.jersey.spi.container.ContainerResponseFilters</param-name>
              <param-value>com.mozs.again.util.CORSFilter</param-value>
          </init-param>
      </servlet>

\>\>つづく
